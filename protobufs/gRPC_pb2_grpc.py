# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import protobufs.gRPC_pb2 as gRPC__pb2


class UserServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateUser = channel.unary_unary(
                '/UserService/CreateUser',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )
        self.GetUser = channel.unary_unary(
                '/UserService/GetUser',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )
        self.UpdateUser = channel.unary_unary(
                '/UserService/UpdateUser',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )
        self.DeleteUser = channel.unary_unary(
                '/UserService/DeleteUser',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )


class UserServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateUser,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
            'GetUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUser,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
            'UpdateUser': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateUser,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
            'DeleteUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteUser,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'UserService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class UserService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UserService/CreateUser',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UserService/GetUser',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UserService/UpdateUser',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/UserService/DeleteUser',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class EventServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateEvent = channel.unary_unary(
                '/EventService/CreateEvent',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )
        self.GetEvent = channel.unary_unary(
                '/EventService/GetEvent',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )
        self.UpdateEvent = channel.unary_unary(
                '/EventService/UpdateEvent',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )
        self.DeleteEvent = channel.unary_unary(
                '/EventService/DeleteEvent',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )
        self.GetEventByUser = channel.unary_unary(
                '/EventService/GetEventByUser',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )


class EventServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEventByUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEvent,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
            'GetEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEvent,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
            'UpdateEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEvent,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
            'DeleteEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEvent,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
            'GetEventByUser': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEventByUser,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'EventService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EventService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EventService/CreateEvent',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EventService/GetEvent',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EventService/UpdateEvent',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EventService/DeleteEvent',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEventByUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EventService/GetEventByUser',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class QueryServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateQuery = channel.unary_unary(
                '/QueryService/CreateQuery',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )
        self.GetQuery = channel.unary_unary(
                '/QueryService/GetQuery',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )
        self.UpdateQuery = channel.unary_unary(
                '/QueryService/UpdateQuery',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )
        self.DeleteQuery = channel.unary_unary(
                '/QueryService/DeleteQuery',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )
        self.GetQueryByEvent = channel.unary_unary(
                '/QueryService/GetQueryByEvent',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )


class QueryServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetQueryByEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_QueryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateQuery,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
            'GetQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQuery,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
            'UpdateQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateQuery,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
            'DeleteQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteQuery,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
            'GetQueryByEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.GetQueryByEvent,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'QueryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class QueryService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryService/CreateQuery',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryService/GetQuery',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryService/UpdateQuery',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryService/DeleteQuery',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetQueryByEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/QueryService/GetQueryByEvent',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TweetServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTweet = channel.unary_unary(
                '/TweetService/CreateTweet',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )
        self.GetTweet = channel.unary_unary(
                '/TweetService/GetTweet',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )
        self.UpdateTweet = channel.unary_unary(
                '/TweetService/UpdateTweet',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )
        self.DeleteTweet = channel.unary_unary(
                '/TweetService/DeleteTweet',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )
        self.SearchTweet = channel.unary_unary(
                '/TweetService/SearchTweet',
                request_serializer=gRPC__pb2.SearchTweetRequest.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )
        self.GetTweetByQuery = channel.unary_unary(
                '/TweetService/GetTweetByQuery',
                request_serializer=gRPC__pb2.Request.SerializeToString,
                response_deserializer=gRPC__pb2.Response.FromString,
                )


class TweetServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateTweet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTweet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTweet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTweet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchTweet(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTweetByQuery(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TweetServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTweet': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTweet,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
            'GetTweet': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTweet,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
            'UpdateTweet': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTweet,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
            'DeleteTweet': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTweet,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
            'SearchTweet': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchTweet,
                    request_deserializer=gRPC__pb2.SearchTweetRequest.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
            'GetTweetByQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTweetByQuery,
                    request_deserializer=gRPC__pb2.Request.FromString,
                    response_serializer=gRPC__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TweetService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TweetService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateTweet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TweetService/CreateTweet',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTweet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TweetService/GetTweet',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateTweet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TweetService/UpdateTweet',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteTweet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TweetService/DeleteTweet',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SearchTweet(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TweetService/SearchTweet',
            gRPC__pb2.SearchTweetRequest.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTweetByQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TweetService/GetTweetByQuery',
            gRPC__pb2.Request.SerializeToString,
            gRPC__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
